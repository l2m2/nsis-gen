'''
@File: nsis-gen.py
@Author: leon.li(l2m2lq@gmail.com)
@Date: 2018-09-05 11:20:09
@Last Modified By: leon.li(l2m2lq@gmail.com>)
@Last Modified Time: 2018-09-05 23:34:29
'''

import os
import sys
import shutil
import json
import glob

class NsisGen:
  __template = r"""
  ; Script generated by the HM NIS Edit Script Wizard.

  ; HM NIS Edit Wizard helper defines
  !define PRODUCT_NAME "{{product_name}}"
  !define PRODUCT_VERSION "{{product_version}}"
  !define PRODUCT_PUBLISHER "{{product_publisher}}"
  !define PRODUCT_WEB_SITE "{{product_web_site}}"
  !define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\{{exe_name}}.exe"
  !define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
  !define PRODUCT_UNINST_ROOT_KEY "HKLM"

  SetCompressor lzma

  ; MUI 1.67 compatible ------
  !include "MUI.nsh"

  ; MUI Settings
  !define MUI_ABORTWARNING
  !define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
  !define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

  ; Language Selection Dialog Settings
  !define MUI_LANGDLL_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
  !define MUI_LANGDLL_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
  !define MUI_LANGDLL_REGISTRY_VALUENAME "NSIS:Language"

  ; Welcome page
  !insertmacro MUI_PAGE_WELCOME
  ; License page
  !insertmacro MUI_PAGE_LICENSE "licence.txt"
  ; Directory page
  !insertmacro MUI_PAGE_DIRECTORY
  ; Instfiles page
  !insertmacro MUI_PAGE_INSTFILES
  ; Finish page
  !define MUI_FINISHPAGE_RUN "$INSTDIR\{{exe_path}}{{exe_name}}.exe"
  !insertmacro MUI_PAGE_FINISH

  ; Uninstaller pages
  !insertmacro MUI_UNPAGE_INSTFILES

  ; Language files
  !insertmacro MUI_LANGUAGE "English"
  !insertmacro MUI_LANGUAGE "SimpChinese"

  ; Reserve files
  !insertmacro MUI_RESERVEFILE_INSTALLOPTIONS

  ; MUI end ------

  Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
  OutFile "{{product_name}}_{{product_version}}_Setup.exe"
  InstallDir "$LOCALAPPDATA\Programs\{{product_name}}"
  InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
  ShowInstDetails show
  ShowUnInstDetails show

  Function .onInit
  ;禁止多次安装实例 start
    ReadRegDWORD $0 HKLM '${PRODUCT_DIR_REGKEY}' "Installed"
    IntCmp $0 +1 +4
    MessageBox MB_OK|MB_USERICON '$(^Name) 已安装在计算机中。如需重新安装，请卸载已有的安装。'
    Quit
    nop
  ;禁止多次安装实例 end

    !insertmacro MUI_LANGDLL_DISPLAY
  FunctionEnd

  Section "MainSection" SEC01
    SetOverwrite try
    {{install}}

    CreateDirectory "$SMPROGRAMS\{{product_name}}"
    {{shortcut}}
  SectionEnd

  Section -AdditionalIcons
    SetOutPath $INSTDIR
    WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
    CreateShortCut "$SMPROGRAMS\{{product_name}}\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
    CreateShortCut "$SMPROGRAMS\{{product_name}}\Uninstall.lnk" "$INSTDIR\uninst.exe"
  SectionEnd

  Section -Post
    WriteUninstaller "$INSTDIR\uninst.exe"
    WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\{{exe_path}}{{exe_name}}.exe"
    WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
    WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
    WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\{{exe_path}}{{exe_name}}.exe"
    WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
    WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
    WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
    WriteRegDword HKLM "${PRODUCT_DIR_REGKEY}" "Installed" 1
  SectionEnd

  Function un.onUninstSuccess
    HideWindow
    MessageBox MB_ICONINFORMATION|MB_OK "{{product_name}} 已成功地从你的计算机移除。"
  FunctionEnd

  Function un.onInit
  !insertmacro MUI_UNGETLANGUAGE
    MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "你确实要完全移除 {{product_name}} ，其及所有的组件？" IDYES +2
    Abort
  FunctionEnd

  Section Uninstall
    Delete "$INSTDIR\${PRODUCT_NAME}.url"
    Delete "$INSTDIR\uninst.exe"

    {{uninstall}}

    DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
    DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
    SetAutoClose true
  SectionEnd

  """
  def __init__(self, config):
    self.__cfg = config
    print('Product Name: ', self.__cfg['product_name'])
    print('此过程大概需要30秒，你可以起身伸个腰。')
      
  def gen(self):
    # 替换模板中对应的变量值
    output_str = self.__template

    # 快捷方式
    smprograms_shortcuts = []
    desktop_shortcuts = []
    shortcuts = self.__cfg['shortcut']
    for i in shortcuts:
      temp = 'CreateShortCut "$SMPROGRAMS\\{product_name}\\{shortcut_name}.lnk" "$INSTDIR\\{exe_path}{shortcut_exe_name}.exe"' \
        .format(product_name=self.__cfg['product_name'], 
                shortcut_name=i['shortcut_name'], 
                exe_path=self.__cfg['exe_path'], 
                shortcut_exe_name=i['shortcut_exe_name'])
      smprograms_shortcuts.append(temp)
      temp = 'CreateShortCut "$DESKTOP\\{shortcut_name}.lnk" "$INSTDIR\\{exe_path}{shortcut_exe_name}.exe"' \
        .format(shortcut_name=i['shortcut_name'], 
                exe_path=self.__cfg['exe_path'], 
                shortcut_exe_name=i['shortcut_exe_name'])
      desktop_shortcuts.append(temp)

    shortcut_str = ''
    if smprograms_shortcuts:
      shortcut_str += '\n    '.join(smprograms_shortcuts)
    if desktop_shortcuts:
      shortcut_str += '\n    '
      shortcut_str += '\n    '.join(desktop_shortcuts)
      
    # 安装
    source_dir = self.__cfg['source_dir']
    if not os.path.isdir(source_dir):
      print('{source_dir} is not a directory.'.format(source_dir=source_dir))
      sys.exit(1)
    
    include_files = self.__cfg['include_files']
    if not include_files:
      print('include files is empty.')
      sys.exit(1)
    
    if os.path.isdir('dist'):
      shutil.rmtree('dist')
    os.makedirs('dist')

    exclude_files = self.__cfg['exclude_files']
    exclude_filenames = []
    for i in exclude_files:
      wildcard_path = os.path.normpath(os.path.join(os.sep, source_dir, i))
      for file in glob.glob(wildcard_path, recursive=True):
        if os.path.isdir(file):
          continue
        exclude_filenames.append(file)

    for i in include_files:
      wildcard_path = os.path.normpath(os.path.join(os.sep, source_dir, i))
      for file in glob.glob(wildcard_path, recursive=True):
        dst_dir = os.path.join(os.sep, os.getcwd(), 'dist', os.path.relpath(os.path.dirname(file), source_dir))
        if not os.path.isdir(dst_dir):
          os.makedirs(dst_dir)
        if os.path.isdir(file):
          continue
        if file in exclude_filenames:
          continue
        # print('copy "{src}" to "{dst}"'.format(src=file, dst=dst_dir))
        shutil.copy(file, dst_dir)

    install_section = []
    last_dir = ''
    for path, _, files in os.walk('dist'):
      for name in files:
        current_file = os.path.join(path, name)
        current_dir = os.path.dirname(current_file)
        if current_dir != last_dir:
          install_section.append('SetOutPath "$INSTDIR\\{dst}"'.format(dst=os.path.relpath(current_dir, 'dist')))
          last_dir = current_dir
        install_section.append('File "{file}"'.format(file=current_file))

    install_section_str = '\n    '.join(install_section)

    # 卸载
    uninstall_section = []
    for path, _, files in os.walk('dist'):
      for name in files:
        uninstall_section.append('Delete "$INSTDIR\\{file}"'.format(file=os.path.relpath(os.path.join(path, name), 'dist')))

    uninstall_section.append('Delete "$SMPROGRAMS\\{product_name}\\Uninstall.lnk"'.format(product_name=self.__cfg['product_name']))
    uninstall_section.append('Delete "$SMPROGRAMS\\{product_name}\\Website.lnk"'.format(product_name=self.__cfg['product_name']))
    for i in shortcuts:
      temp = 'Delete "$SMPROGRAMS\\{product_name}\\{shortcut_name}.lnk"'.format(product_name=self.__cfg['product_name'],shortcut_name=i['shortcut_name'])
      uninstall_section.append(temp)
      temp = 'Delete "$DESKTOP\\{shortcut_name}.lnk"'.format(shortcut_name=i['shortcut_name'])
      uninstall_section.append(temp)
    uninstall_section.append('RMDir "$SMPROGRAMS\\{product_name}"'.format(product_name=self.__cfg['product_name']))
    for path, subdirs, files in os.walk('dist'):
      for name in subdirs:
        uninstall_section.append('RMDir "$INSTDIR\\{dir}"'.format(dir=os.path.relpath(os.path.join(path, name), 'dist')))

    uninstall_section_str = '\n    '.join(uninstall_section)

    # 替换模板中的变量
    output_str = output_str.replace(r'{{product_name}}', self.__cfg['product_name']) \
      .replace(r'{{product_version}}', self.__cfg['product_version']) \
      .replace(r'{{product_publisher}}', self.__cfg['product_publisher']) \
      .replace(r'{{product_web_site}}', self.__cfg['product_web_site']) \
      .replace(r'{{exe_name}}', self.__cfg['exe_name']) \
      .replace(r'{{exe_path}}', self.__cfg['exe_path']) \
      .replace(r'{{shortcut}}', shortcut_str) \
      .replace(r'{{install}}', install_section_str) \
      .replace(r'{{uninstall}}', uninstall_section_str)

    # 写入脚本到文件
    output_file = '{product_name}_{product_version}_setup.nsi'.format(product_name=self.__cfg['product_name'], product_version=self.__cfg['product_version'])
    with open(output_file, 'w') as fd:
      fd.write(output_str)
      
if __name__ == "__main__":
  # 默认读取nsis-gen.py同级目录下的config.json配置文件
  if not os.path.exists('config.json'):
    print('config.json not exist.')
    sys.exit(1)
  with open('config.json', 'r') as fd:
    config = fd.read()
  try:
    config = json.loads(config)
  except json.decoder.JSONDecodeError as e:
    print('config.json is invalid: ', e)
    sys.exit(1)
  generator = NsisGen(config)
  generator.gen()
